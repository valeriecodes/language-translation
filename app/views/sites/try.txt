@SitesShowBox = React.createClass
  getInitialState: ->
   site: @props.site
    country: @props.country
    volunteers: @props.volunteers
    contributors: @props.contributors 
    alertVisible: false

  handleAlertShow: ->
    @setState({ alertVisible: true })
  handleAlertDismiss: ->
    @setState({ alertVisible: false })

  handleVolunteerAddition: (userdata) ->
    userdata.act = "volunteer"
    userdata.site_id = @state.site.id
    add_role_url = '/sites/add_role.json'
    $.ajax({
      url: add_role_url
      dataType: 'json'
      type: 'POST'
      data: userdata
      success: ((data) ->
        @setState({volunteers: data.sites}) #'data' is in form {sites: Array[n]}
      ).bind(this)
      error: ((xhr, status, err) ->
        @handleAlertShow()
        console.error(add_role_url, status, err.toString())
      ).bind(this)
    })
  handleContributorAddition: (userdata) ->
    userdata.act = "contributor"
    userdata.site_id = @state.site.id
    add_role_url = '/sites/add_role.json'
    $.ajax({
      url: add_role_url
      dataType: 'json'
      type: 'POST'
      data: userdata
      success: ((data) ->
        @setState({contributors: data.sites}) #'data' is in form {sites: Array[n]}
      ).bind(this)
      error: ((xhr, status, err) ->
        @handleAlertShow()
        console.error(add_role_url, status, err.toString())
      ).bind(this)
    })
  handleRoleRemoval: (userdata) ->
    userdata.site_id = @state.site.id
    remove_role_url = '/sites/remove_role.json'
    $.ajax({
      url: remove_role_url
      dataType: 'json'
      type: 'POST'
      data: userdata
      success: ((data) ->
        if(userdata.act == 'volunteer')
          @setState({volunteers: data.sites}) #'data' is in form {sites: Array[n]}
        else if(userdata.act == 'contributor')
          @setState({contributors: data.sites}) #'data' is in form {sites: Array[n]}
      ).bind(this)
      error: ((xhr, status, err) ->
        console.error(remove_role_url, status, err.toString())
      ).bind(this)
    })

  render: ->
 
   alert =
      if @state.alertVisible
        `<Alert bsStyle='danger' onDismiss={this.handleAlertDismiss}>
          <h4>Something's wrong. Please check if you have entered the username correctly</h4>
        </Alert>`

    `<div>
      <header className="app-bar promote-layer">
        <div className="app-bar-container">
          <button className="menu"><span className="icon-menu"></span></button>
          <div className="Heading">
            <a href="/sites" className="Back"><span className="icon-chevron-left-thin"></span><span className="Back-text">Back</span></a>
            <h1 className="title"><span>Post</span></h1>
          </div>
        </div>
      </header>
      <main>
        <div className="SitesShowBox">
          <h2>{this.state.site.name} <span className="h4">{this.state.country.name}</span></h2>
          <br/>
                      
          {alert}
          <VolunteersList data={this.state.volunteers} onRoleAddition={this.handleVolunteerAddition} onRoleRemoval={this.handleRoleRemoval}/>
          <ContributorsList data={this.state.contributors} onRoleAddition={this.handleContributorAddition} onRoleRemoval={this.handleRoleRemoval}/>
        </div>
       </main>
     </div>`

@VolunteersList = React.createClass
  handleRoleAddition: ->
    @props.onRoleAddition({username: React.findDOMNode(@refs.username).value.trim(), action: "", site_id: -1})
    React.findDOMNode(@refs.username).value = ''
  handleRoleRemoval: (data) ->
    data.act = 'volunteer'
    @props.onRoleRemoval(data)
  render: ->
    
    clickRemoval = @handleRoleRemoval
    userNodes = @props.data.map((user) ->
      `<ShowUserNode key={user.id} user={user} onRoleRemoval={clickRemoval}/>`)
    `<div className="VolunteersList">
      <h3>Volunteers</h3>
     
      <ul>
       <div className="col-md-5">
          <div className="input-group">
            <input type="text" className="form-control" placeholder="New volunteer's username" ref='username'/>
            <span className="input-group-btn">
              <button onClick={this.handleRoleAddition} className="btn btn-default" type="button">Add</button>
            </span>
          </div>
        </div>
        <br/><br/><br/>
         {userNodes}
      </ul>
    </div>`

@ContributorsList = React.createClass
  handleRoleAddition: ->
    @props.onRoleAddition({username: React.findDOMNode(@refs.username).value.trim(), act: "", site_id: -1})
    React.findDOMNode(@refs.username).value = ''
  handleRoleRemoval: (data) ->
    data.act = 'contributor'
    @props.onRoleRemoval(data)
  render: ->
    clickRemoval = @handleRoleRemoval
    userNodes = @props.data.map((user) ->
      `<ShowUserNode key={user.id} user={user} onRoleRemoval={clickRemoval}/>`)
    `<div className="ContributorsList">
      <h3>Contributors</h3>
      <ul>
       <div className="col-md-5">
          <div className="input-group">
            <input type="text" className="form-control" placeholder="New contributor's username" ref='username'/>
            <span className="input-group-btn">
              <button onClick={this.handleRoleAddition} className="btn btn-default" type="button">Add</button>
            </span>
          </div>
        </div>
        <br/><br/><br/>
         {userNodes}
      </ul>
    </div>`

@ShowUserNode = React.createClass
  handleRoleRemoval: ->
    @props.onRoleRemoval({user_id: @props.user.id, act: "", site_id: -1})
  render: ->
    show_url = "/members/" + @props.user.id
    `<li type = "square" className="UserNode">
        <a className="h4" href={show_url}>{this.props.user.username} </a>
        <button onclick={this.hangleRoleRemoval} className="btn btn-default">
        <span className="glyphicon glyphicon-remove" /> 
        </button>
        <br/><br/>
    </li>`
 
